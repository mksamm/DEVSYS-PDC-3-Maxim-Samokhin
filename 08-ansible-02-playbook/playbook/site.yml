---
- name: Check reachability of remote URL
  hosts: all

  tasks:
    - name: Check reachability of www.elastic.co
      ansible.builtin.get_url:
        url: "https://artifacts.elastic.co/downloads/kibana/kibana-7.10.1-linux-x86_64.tar.gz.sha512"
        dest: "/tmp/kibana-7.10.1-linux-x86_64.tar.gz.sha512"
        mode: 0755
      register: elastic_is_reachable
      ignore_errors: true

- name: Install Elasticsearch
  hosts: elasticsearch
  tasks:
    - name: Upload DEB Elasticsearch from remote URL
      ansible.builtin.get_url:
        url: "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{{ elastic_version }}-amd64.deb"
        dest: "/tmp/elasticsearch-{{ elastic_version }}-amd64.deb"
        mode: 0755
        timeout: 60
        force: true
        validate_certs: false
      register: get_elastic
      until: get_elastic is succeeded
      tags: elastic
      when: elastic_is_reachable is succeeded

    - name: Upload DEB Elasticsearch from local storage
      ansible.builtin.copy:
        src: "./files/{{ elastic_package }}"
        dest: "/tmp/elasticsearch-{{ elastic_version }}-amd64.deb"
        mode: 0755
        force: false
      register: download_elastic_binaries
      until: download_elastic_binaries is succeeded
    - name: Install Elasticsearch from DEB
      become: true
      ansible.builtin.apt:
        deb: /tmp/elasticsearch-{{ elastic_version }}-amd64.deb
    - name: Install ufw
      become: true
      ansible.builtin.package:
        name: ufw
        state: present
    - name: Configuring Elasticsearch
      become: true
      ansible.builtin.lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        search_string: "network.host:"
        line: "network.host: {{ internal_ip }}"
        create: true
        mode: 0660
    - name: Start service elasticsearch, if not started
      become: true
      ansible.builtin.service:
        name: elasticsearch
        state: started
        enabled: true

- name: Install Kibana
  hosts: kibana
  tasks:
    - name: Upload DEB Kibana om remote URL
      ansible.builtin.get_url:
        url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ kibana_version }}-amd64.deb"
        dest: "/tmp/elasticsearch-{{ kibana_version }}-amd64.deb"
        mode: 0755
        timeout: 60
        force: true
        validate_certs: false
      register: get_kibana
      until: get_kibana is succeeded
      tags: kibana
      when: elastic_is_reachable is succeeded

    - name: Upload DEB Kibana from local storage
      ansible.builtin.copy:
        src: "./files/{{ kibana_package }}"
        dest: "/tmp/kibana-{{ kibana_version }}-amd64.deb"
        force: false
        mode: 0755
      register: download_kibana_binaries
      until: download_kibana_binaries is succeeded
    - name: Install Kibana from DEB
      become: true
      ansible.builtin.apt:
        deb: "/tmp/kibana-{{ kibana_version }}-amd64.deb"
    - name: Install ufw
      become: true
      ansible.builtin.package:
        name: ufw
        state: present
    - name: Enabling ufw
      become: true
      community.general.ufw:
        rule: allow
        state: enabled
        port: '{{ item }}'
      with_items:
        - ssh
        - 9200
        - 5601
    - name: Configuring Kibana
      become: true
      ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        search_string: "server.host:"
        line: "server.host: {{ internal_ip }}"
        create: true
        mode: 0660
    - name: Configuring connection to Elasticsearch
      become: true
      ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        search_string: "elasticsearch.hosts:"
        line: "elasticsearch.hosts: [\"http://{{ hostvars['elastic-1'].internal_ip }}:9200\"]"
        create: true
        mode: 0660
    - name: Start service kibana, if not started
      become: true
      ansible.builtin.service:
        name: kibana
        state: started
        enabled: true
